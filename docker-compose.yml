services:

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes 
    networks:
      - otz   
    volumes:
      - redis_data:/data

  database:
    image: postgres:alpine
    # environment:
    #   POSTGRES_DB: "otz"
    #   POSTGRES_USER: "postgres"
    #   POSTGRES_PASSWORD: "postgres"
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - otz
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10 

  patient:
    build:
      context: ./server/Patient
      dockerfile: Dockerfile
    image: patient-image
    volumes:
      - ./server/Patient/:/usr/src/app
      - /usr/src/app/node_modules
    deploy:
      mode: replicated
      replicas: 2
      placement:
        max_replicas_per_node: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure    
      resources:
        limits:
          cpus: '0.30'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 500M
    ports:
      - 5001:5001
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started  
    networks:
      - otz

  lab:
    build:
      context: ./server/Lab
      dockerfile: Dockerfile
    image: lab-image
    volumes:
      - ./server/Lab/:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 5002:5002
    depends_on:
      database:
        condition: service_healthy
    networks:
      - otz

  enrollment:
    build:
      context: ./server/Enrollment
      dockerfile: Dockerfile
    image: enrollment-image
    volumes:
      - ./server/Enrollment/:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 5003:5003
    depends_on:
      database:
        condition: service_healthy
    networks:
      - otz


  root:
    build:
      context: ./server/root
      dockerfile: Dockerfile
    image: root-image
    volumes:
      - ./server/root:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 5000:5000
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/appointments/fetchAll"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 2m    
    networks:
      - otz

  school:
    build:
      context: ./server/School
      dockerfile: Dockerfile
    image: school-image
    volumes:
      - ./server/School:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 5004:5004
    depends_on:
      database:
        condition: service_healthy
      # - kafka-2
    networks:
      - otz

  appointment:
    build:
      context: ./server/Appointment
      dockerfile: Dockerfile
    image: appointment-image
    volumes:
      - ./server/Appointment:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 5005:5005
    depends_on:
      database:
        condition: service_healthy
      # - kafka-2
    networks:
      - otz

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: otz-client
    # container_name: huruma-frontendv2
    volumes:
      - ./client:/usr/src/app
      - /usr/src/app/node_modules

    deploy:
      # mode: replicated
      # replicas: 5
      # placement:
      #   max_replicas_per_node: 1
      # update_config:
      #   parallelism: 2
      #   delay: 10s
      restart_policy:
        condition: on-failure    
      resources:
        limits:
          cpus: '0.50'
          # memory: 1000M

    ports:
      - "3000:3000"
    depends_on:
      - enrollment
      - patient
      - school
      - lab
      - root
      - appointment    
    networks:
      - otz

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:8080"
    deploy:
      # mode: replicated
      # replicas: 5
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'   

    depends_on:
      - patient
      - root
      - enrollment
      - school
      - lab
      - appointment    
      - client
    networks:
      - otz

networks:
 otz:
  driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local