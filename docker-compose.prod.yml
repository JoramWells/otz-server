services:

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes 
    networks:
      - otz   
    volumes:
      - redis_data:/data

  database:
    image: postgres:alpine
    # environment:
    #   POSTGRES_DB: "otz"
    #   POSTGRES_USER: "postgres"
    #   POSTGRES_PASSWORD: "postgres"
    env_file:
      - .env
    ports:
      - 5432:5432
    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - ./otz_backup.sql:/docker-entrypoint-initdb.d/otz_backup.sql

    deploy:
      # mode: replicated
      # replicas: 2
      # placement:
      #   max_replicas_per_node: 1
      # update_config:
      #   parallelism: 2
      #   delay: 10s
      restart_policy:
        condition: always    
      # resources:
      #   limits:
      #     cpus: '0.10'
      #     memory: 400M
      #   reservations:
      #     cpus: '0.10'
      #     memory: 400M
    networks:
      - otz
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10 

  users:
    build:
      context: ./src/Users
      dockerfile: Dockerfile.prod
    image: users-image
    volumes:
      - ./src/Users/:/usr/src/app
      - /usr/src/app/node_modules
    # deploy:
    #   mode: replicated
    #   replicas: 2
    #   placement:
    #     max_replicas_per_node: 1
    #   update_config:
    #     parallelism: 2
    #     delay: 10s
    #   restart_policy:
    #     condition: on-failure    
    #   resources:
    #     limits:
    #       cpus: '0.10'
    #       memory: 400M
    #     reservations:
    #       cpus: '0.10'
    #       memory: 400M
    ports:
      - 5001:5001
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started  
    networks:
      - otz

  lab:
    build:
      context: ./src/Lab
      dockerfile: Dockerfile
    image: lab-image
    volumes:
      - ./src/Lab/:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 5002:5002
    depends_on:
      database:
        condition: service_healthy
    networks:
      - otz

  root:
    build:
      context: ./src/root
      dockerfile: Dockerfile
    image: root-image
    volumes:
      - ./src/root:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 5000:5000
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/users/fetchAll"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 2m    
    networks:
      - otz

  school:
    build:
      context: ./src/School
      dockerfile: Dockerfile
    image: school-image
    volumes:
      - ./src/School:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 5004:5004
    depends_on:
      database:
        condition: service_healthy
      # - kafka-2
    networks:
      - otz

  appointment:
    build:
      context: ./src/Appointment
      dockerfile: Dockerfile
    image: appointment-image
    volumes:
      - ./src/Appointment:/usr/src/app
      - /usr/src/app/node_modules
    # deploy:
    #   mode: replicated
    #   replicas: 2
    #   placement:
    #     max_replicas_per_node: 1
    #   update_config:
    #     parallelism: 2
    #     delay: 10s
    #   restart_policy:
    #     condition: on-failure    
    #   resources:
    #     limits:
    #       cpus: '0.10'
    #       memory: 800M
    #     reservations:
    #       cpus: '0.10'
    #       memory: 500M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/appointments/fetchAll"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 2m       
    ports:
      - 5005:5005
    depends_on:
      database:
        condition: service_healthy
      # - kafka-2
      redis:
        condition: service_started    
    networks:
      - otz

  # client:
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile
  #   image: otz-client
  #   # container_name: huruma-frontendv2
  #   volumes:
  #     - ./client:/usr/src/app
  #     - /usr/src/app/node_modules

  #   deploy:
  #     # mode: replicated
  #     # replicas: 5
  #     # placement:
  #     #   max_replicas_per_node: 1
  #     # update_config:
  #     #   parallelism: 2
  #     #   delay: 10s
  #     # restart_policy:
  #     #   condition: on-failure    
  #     resources:
  #       limits:
  #         cpus: '0.50'
  #         # memory: 1000M

  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - enrollment
  #     - users
  #     - school
  #     - lab
  #     - root
  #     - appointment    
  #   networks:
  #     - otz

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl


    ports:
      - 80:80
    # deploy:
    #   mode: replicated
    #   replicas: 2
    #   placement:
    #     max_replicas_per_node: 1
    #   update_config:
    #     parallelism: 2
    #     delay: 10s
    #   restart_policy:
    #     condition: on-failure    
    #   resources:
    #     limits:
    #       cpus: '0.05'
    #       # memory: 400M
    #     reservations:
    #       cpus: '0.05'
    #       # memory: 400M 

    depends_on:
      - users
      - root
      - school
      - lab
      - appointment    
      # - client
    networks:
      - otz

networks:
 otz:
  driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local